class e{constructor(e={}){const{tagName:s="div",state:t={},props:n={}}=e;this.el=document.createElement(s),this.state=t,this.props=n,this.render()}render(){}}function s(e){location.hash||history.replaceState(null,"","/#/");const s=document.querySelector("router-view"),[t,n=""]=location.hash.split("?"),i=n.split("&").reduce(((e,s)=>{const[t,n]=s.split("=");return e[t]=n,e}),{});history.replaceState(i,"");const a=e.find((e=>new RegExp(`${e.path}/?$`).test(t)));s.innerHTML="",s.append((new a.component).el),window.scrollTo(0,0)}class t extends e{render(){this.el.classList.add("headline"),this.el.innerHTML="\n      <h1>\n        <span>OMDb API</span><br>\n        THE OPEN<br>\n        MOVIE DATABASE\n      </h1>\n      <p>\n        The OMDb API is a RESTful web service to obtain movie information, \n        all content and images on the site are contributed and maintained by our users.<br>\n        If you find this service useful, please consider making a one-time donation or become a patron.\n      </p>\n    "}}const n=new class{constructor(e){this.state={},this.observers={};for(const s in e)Object.defineProperty(this.state,s,{get:()=>e[s],set:t=>{e[s]=t,Array.isArray(this.observers[s])&&this.observers[s].forEach((e=>e(t)))}})}subscribe(e,s){Array.isArray(this.observers[e])?this.observers[e].push(s):this.observers[e]=[s]}}({searchText:"",page:1,pageMax:1,movies:[],movie:{},loading:!1,message:"Search for the movie title!"});var i=n;const a=async e=>{n.state.loading=!0,n.state.page=e,1===e&&(n.state.movies=[],n.state.message="");try{const e=await fetch(`https://omdbapi.com?apikey=7035c60c&s=${n.state.searchText}&page=${n.state.page}`),{Search:s,totalResults:t,Response:i,Error:a}=await e.json();"True"===i?(n.state.movies=[...n.state.movies,...s],n.state.pageMax=Math.ceil(Number(t)/10)):n.state.message=a}catch(e){console.log("searchMovies error:",e)}finally{n.state.loading=!1}};class r extends e{render(){this.el.classList.add("search"),this.el.innerHTML=`\n      <input \n        value="${i.state.searchText}" \n        placeholder="Enter the movie title to search!" />\n      <button class="btn btn-primary">\n        Search!\n      </button>\n    `;const e=this.el.querySelector("input");e.addEventListener("input",(()=>{i.state.searchText=e.value})),e.addEventListener("keydown",(e=>{"Enter"===e.key&&i.state.searchText.trim()&&a(1)}));this.el.querySelector(".btn").addEventListener("click",(()=>{i.state.searchText.trim()&&a(1)}))}}class o extends e{constructor(e){super({props:e,tagName:"a"})}render(){const{movie:e}=this.props;this.el.setAttribute("href",`#/movie?id=${e.imdbID}`),this.el.classList.add("movie"),this.el.style.backgroundImage=`url(${e.Poster})`,this.el.innerHTML=`\n      <div class="info">\n        <div class="year">\n          ${e.Year}\n        </div>\n        <div class="title">\n          ${e.Title}\n        </div>\n      </div>\n    `}}class c extends e{constructor(){super(),i.subscribe("movies",(()=>{this.render()})),i.subscribe("loading",(()=>{this.render()})),i.subscribe("message",(()=>{this.render()}))}render(){this.el.classList.add("movie-list"),this.el.innerHTML=`\n      ${i.state.message?`<div class="message">${i.state.message}</div>`:'<div class="movies"></div>'}\n      <div class="the-loader hide"></div>\n    `;const e=this.el.querySelector(".movies");e?.append(...i.state.movies.map((e=>new o({movie:e}).el)));const s=this.el.querySelector(".the-loader");i.state.loading?s.classList.remove("hide"):s.classList.add("hide")}}class l extends e{constructor(){super({tagName:"button"}),i.subscribe("pageMax",(()=>{const{page:e,pageMax:s}=i.state;s>e?this.el.classList.remove("hide"):this.el.classList.add("hide")}))}render(){this.el.classList.add("btn","view-more","hide"),this.el.textContent="View more..",this.el.addEventListener("click",(async()=>{await a(i.state.page+1)}))}}var d,h=(d=[{path:"#/",component:class extends e{render(){const e=(new t).el,s=(new r).el,n=(new c).el,i=(new l).el;this.el.classList.add("container"),this.el.append(e,s,n,i)}}},{path:"#/movie",component:class extends e{async render(){this.el.classList.add("container","the-movie"),this.el.innerHTML='\n      <div class="poster skeleton"></div>\n      <div class="specs">\n        <div class="title skeleton"></div>\n        <div class="labels skeleton"></div>\n        <div class="plot skeleton"></div>\n      </div>\n    ',await(async e=>{try{const s=await fetch(`https://omdbapi.com?apikey=7035c60c&i=${e}&plot=full`);n.state.movie=await s.json()}catch(e){console.log("getMovieDetails error:",e)}})(history.state.id),console.log(i.state.movie);const{movie:e}=i.state,s=e.Poster.replace("SX300","SX700");this.el.innerHTML=`\n      <div \n        style="background-image: url(${s})" \n        class="poster"></div>\n      <div class="specs">\n        <div class="title">\n          ${e.Title}\n        </div>\n        <div class="labels">\n          <span>${e.Released}</span>\n          &nbsp;/&nbsp;\n          <span>${e.Runtime}</span>\n          &nbsp;/&nbsp;\n          <span>${e.Country}</span>\n        </div>\n        <div class="plot">\n          ${e.Plot}\n        </div>\n        <div>\n          <h3>Ratings</h3>\n          ${e.Ratings.map((e=>`<p>${e.Source} - ${e.Value}</p>`)).join("")}\n        </div>\n        <div>\n          <h3>Actors</h3>\n          <p>${e.Actors}</p>\n        </div>\n        <div>\n          <h3>Director</h3>\n          <p>${e.Director}</p>\n        </div>\n        <div>\n          <h3>Production</h3>\n          <p>${e.Production}</p>\n        </div>\n        <div>\n          <h3>Genre</h3>\n          <p>${e.Genre}</p>\n        </div>\n      </div>\n    `}}}],function(){window.addEventListener("popstate",(()=>{s(d)})),s(d)});document.querySelector("#root").append((new class extends e{render(){const e=document.createElement("router-view");this.el.append(e)}}).el),h();
//# sourceMappingURL=index.66d620b6.js.map
